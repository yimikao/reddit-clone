// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yimikao/reddit-clone/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	db "github.com/yimikao/reddit-clone/db/sqlc"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ChangeBlockedStatus mocks base method
func (m *MockStore) ChangeBlockedStatus(arg0 context.Context, arg1 db.ChangeBlockedStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBlockedStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeBlockedStatus indicates an expected call of ChangeBlockedStatus
func (mr *MockStoreMockRecorder) ChangeBlockedStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBlockedStatus", reflect.TypeOf((*MockStore)(nil).ChangeBlockedStatus), arg0, arg1)
}

// CreatePost mocks base method
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateSub mocks base method
func (m *MockStore) CreateSub(arg0 context.Context, arg1 db.CreateSubParams) (db.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSub", arg0, arg1)
	ret0, _ := ret[0].(db.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSub indicates an expected call of CreateSub
func (mr *MockStoreMockRecorder) CreateSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSub", reflect.TypeOf((*MockStore)(nil).CreateSub), arg0, arg1)
}

// CreateSubscriber mocks base method
func (m *MockStore) CreateSubscriber(arg0 context.Context, arg1 db.CreateSubscriberParams) (db.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriber", arg0, arg1)
	ret0, _ := ret[0].(db.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriber indicates an expected call of CreateSubscriber
func (mr *MockStoreMockRecorder) CreateSubscriber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriber", reflect.TypeOf((*MockStore)(nil).CreateSubscriber), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeletePost mocks base method
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteSub mocks base method
func (m *MockStore) DeleteSub(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSub", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSub indicates an expected call of DeleteSub
func (mr *MockStoreMockRecorder) DeleteSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSub", reflect.TypeOf((*MockStore)(nil).DeleteSub), arg0, arg1)
}

// DeleteSubscriber mocks base method
func (m *MockStore) DeleteSubscriber(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber
func (mr *MockStoreMockRecorder) DeleteSubscriber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockStore)(nil).DeleteSubscriber), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetPost mocks base method
func (m *MockStore) GetPost(arg0 context.Context, arg1 int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockStoreMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), arg0, arg1)
}

// GetSub mocks base method
func (m *MockStore) GetSub(arg0 context.Context, arg1 string) (db.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSub", arg0, arg1)
	ret0, _ := ret[0].(db.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSub indicates an expected call of GetSub
func (mr *MockStoreMockRecorder) GetSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSub", reflect.TypeOf((*MockStore)(nil).GetSub), arg0, arg1)
}

// GetSubscriber mocks base method
func (m *MockStore) GetSubscriber(arg0 context.Context, arg1 db.GetSubscriberParams) (db.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", arg0, arg1)
	ret0, _ := ret[0].(db.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber
func (mr *MockStoreMockRecorder) GetSubscriber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockStore)(nil).GetSubscriber), arg0, arg1)
}

// GetUser mocks base method
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListPosts mocks base method
func (m *MockStore) ListPosts(arg0 context.Context, arg1 db.ListPostsParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts
func (mr *MockStoreMockRecorder) ListPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), arg0, arg1)
}

// ListSub mocks base method
func (m *MockStore) ListSub(arg0 context.Context, arg1 db.ListSubParams) ([]db.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSub", arg0, arg1)
	ret0, _ := ret[0].([]db.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSub indicates an expected call of ListSub
func (mr *MockStoreMockRecorder) ListSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSub", reflect.TypeOf((*MockStore)(nil).ListSub), arg0, arg1)
}

// ListUsers mocks base method
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdatePost mocks base method
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdateSub mocks base method
func (m *MockStore) UpdateSub(arg0 context.Context, arg1 db.UpdateSubParams) (db.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSub", arg0, arg1)
	ret0, _ := ret[0].(db.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSub indicates an expected call of UpdateSub
func (mr *MockStoreMockRecorder) UpdateSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSub", reflect.TypeOf((*MockStore)(nil).UpdateSub), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
