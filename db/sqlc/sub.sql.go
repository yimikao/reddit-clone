// Code generated by sqlc. DO NOT EDIT.
// source: sub.sql

package db

import (
	"context"
	"database/sql"
)

const createSub = `-- name: CreateSub :one
INSERT INTO subs (
    name,
    creator_id
) VALUES (
    $1, $2
) RETURNING id, creator_id, avatar, name, description, created_at
`

type CreateSubParams struct {
	Name      string `json:"name"`
	CreatorID int64  `json:"creator_id"`
}

func (q *Queries) CreateSub(ctx context.Context, arg CreateSubParams) (Sub, error) {
	row := q.db.QueryRowContext(ctx, createSub, arg.Name, arg.CreatorID)
	var i Sub
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Avatar,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSub = `-- name: DeleteSub :exec
DELETE FROM subs 
WHERE name = $1
`

func (q *Queries) DeleteSub(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteSub, name)
	return err
}

const getSub = `-- name: GetSub :one
SELECT id, creator_id, avatar, name, description, created_at FROM subs
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSub(ctx context.Context, name string) (Sub, error) {
	row := q.db.QueryRowContext(ctx, getSub, name)
	var i Sub
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Avatar,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listSub = `-- name: ListSub :many
SELECT id, creator_id, avatar, name, description, created_at FROM subs
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListSubParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSub(ctx context.Context, arg ListSubParams) ([]Sub, error) {
	rows, err := q.db.QueryContext(ctx, listSub, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sub{}
	for rows.Next() {
		var i Sub
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.Avatar,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSub = `-- name: UpdateSub :one
UPDATE subs
SET 
    name = $2,
    avatar = $3,
    description = $4
WHERE name = $1
RETURNING id, creator_id, avatar, name, description, created_at
`

type UpdateSubParams struct {
	Name        string         `json:"name"`
	Name_2      string         `json:"name_2"`
	Avatar      sql.NullString `json:"avatar"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateSub(ctx context.Context, arg UpdateSubParams) (Sub, error) {
	row := q.db.QueryRowContext(ctx, updateSub,
		arg.Name,
		arg.Name_2,
		arg.Avatar,
		arg.Description,
	)
	var i Sub
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Avatar,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
