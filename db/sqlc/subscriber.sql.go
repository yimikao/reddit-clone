// Code generated by sqlc. DO NOT EDIT.
// source: subscriber.sql

package db

import (
	"context"
)

const createSubscriber = `-- name: CreateSubscriber :one
INSERT INTO subscribers (
    sub_id,
    user_id    
) VALUES (
    $1, $2
) RETURNING id, sub_id, user_id, created_at
`

type CreateSubscriberParams struct {
	SubID  int64 `json:"sub_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) CreateSubscriber(ctx context.Context, arg CreateSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, createSubscriber, arg.SubID, arg.UserID)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.SubID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriber = `-- name: DeleteSubscriber :exec
DELETE FROM subscribers
WHERE id = $1
`

func (q *Queries) DeleteSubscriber(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriber, id)
	return err
}

const getSubscriber = `-- name: GetSubscriber :one
SELECT id, sub_id, user_id, created_at FROM subscribers
WHERE sub_id = $1 AND user_id = $2
LIMIT 1
`

type GetSubscriberParams struct {
	SubID  int64 `json:"sub_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetSubscriber(ctx context.Context, arg GetSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRowContext(ctx, getSubscriber, arg.SubID, arg.UserID)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.SubID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
